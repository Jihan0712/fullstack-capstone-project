{"ast":null,"code":"var _jsxFileName = \"/home/project/fullstack-capstone-project/giftlink-frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Provider Component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      setIsLoggedIn\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for using auth context\n_s(AuthProvider, \"g0MSgNVZk+vKiEFnDJ9VPEfswFA=\");\n_c = AuthProvider;\nexport const useAppContext = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAppContext must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAppContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isLoggedIn","setIsLoggedIn","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAppContext","_s2","context","Error","$RefreshReg$"],"sources":["/home/project/fullstack-capstone-project/giftlink-frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\n// Create the context\nconst AuthContext = createContext();\n\n// Provider Component\nexport const AuthProvider = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  return (\n    <AuthContext.Provider value={{ isLoggedIn, setIsLoggedIn }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom hook for using auth context\nexport const useAppContext = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAppContext must be used within an AuthProvider');\n  }\n  return context;\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAEnD,oBACEE,OAAA,CAACC,WAAW,CAACM,QAAQ;IAACC,KAAK,EAAE;MAAEH,UAAU;MAAEC;IAAc,CAAE;IAAAH,QAAA,EACxDA;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAR,EAAA,CAVaF,YAAY;AAAAW,EAAA,GAAZX,YAAY;AAWzB,OAAO,MAAMY,aAAa,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACjC,MAAMC,OAAO,GAAGnB,UAAU,CAACI,WAAW,CAAC;EACvC,IAAI,CAACe,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,mDAAmD,CAAC;EACtE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,aAAa;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}